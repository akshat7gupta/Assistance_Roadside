{"ast":null,"code":"var _jsxFileName = \"T:\\\\JivaRecovery-master\\\\client\\\\src\\\\components\\\\administration\\\\admin-panel\\\\admin-panel.jsx\";\nimport \"./admin-panel.scss\";\nimport \"react-tabs/style/react-tabs.css\";\nimport React, { useState, useEffect } from \"react\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport DataTable from \"react-data-table-component\";\nimport Request from \"../request/request\";\nimport EditUserModal from \"../../modals/edit-user-modal\";\nimport requestService from \"../../../services/request-service\";\nimport userService from \"../../../services/user-service\";\n\nconst AdminPanel = () => {\n  let [requests, setRequests] = useState([]);\n  let [users, setUsers] = useState([]);\n\n  const updateUser = (id, newUser) => {\n    setUsers(users => {\n      return users.map(user => {\n        if (user._id === id) {\n          return newUser;\n        } else {\n          return user;\n        }\n      });\n    });\n  };\n\n  const requestColumns = [{\n    name: \"Марка\",\n    selector: \"brand\",\n    sortable: true\n  }, {\n    name: \"Модел\",\n    selector: \"model\",\n    sortable: true\n  }, {\n    name: \"Година\",\n    selector: \"year\",\n    sortable: true\n  }, {\n    name: \"Състояние\",\n    selector: \"condition\",\n    sortable: true\n  }, {\n    name: \"Статус\",\n    selector: \"status\",\n    sortable: true,\n    className: \"status\"\n  }];\n  const userColumns = [{\n    name: \"Име\",\n    selector: \"name\",\n    sortable: true\n  }, {\n    name: \"Имейл\",\n    selector: \"email\",\n    sortable: true\n  }, {\n    name: \"Телефон\",\n    selector: \"phone\",\n    sortable: true\n  }, {\n    name: \"\",\n    cell: data => /*#__PURE__*/React.createElement(EditUserModal, {\n      user: data,\n      updateUser: updateUser,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 23\n      }\n    })\n  }];\n  const conditionalRowStyles = [{\n    when: row => row.status === \"Изчакване\",\n    style: {\n      backgroundColor: \"rgba(240,219,8,0.2)\",\n      \"&:hover\": {\n        cursor: \"pointer\"\n      }\n    }\n  }, {\n    when: row => row.status === \"Одобрена\",\n    style: {\n      backgroundColor: \"rgba(8, 240, 53, 0.2)\",\n      \"&:hover\": {\n        cursor: \"pointer\"\n      }\n    }\n  }, {\n    when: row => row.status === \"Отхвърлена\",\n    style: {\n      backgroundColor: \"rgba(240, 8, 45, 0.2)\",\n      \"&:hover\": {\n        cursor: \"pointer\"\n      }\n    }\n  }, {\n    when: row => row.status === \"Завършена\",\n    style: {\n      backgroundColor: \"rgba(8, 159, 240, 0.2)\",\n      \"&:hover\": {\n        cursor: \"pointer\"\n      }\n    }\n  }];\n\n  const ExpanableRequestRow = ({\n    data\n  }) => {\n    return /*#__PURE__*/React.createElement(Request, Object.assign({}, data, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 12\n      }\n    }));\n  };\n\n  useEffect(() => {\n    requestService.getRequest(\"all\").then(res => {\n      setRequests(res);\n    });\n    userService.getUser(\"all\").then(res => {\n      setUsers(res);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"admin-panel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Tabs, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TabList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, \"\\u0417\\u0430\\u044F\\u0432\\u043A\\u0438\"), /*#__PURE__*/React.createElement(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }, \"\\u041F\\u043E\\u0442\\u0440\\u0435\\u0431\\u0438\\u0442\\u0435\\u043B\\u0438\")), /*#__PURE__*/React.createElement(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, requests.length > 0 ? /*#__PURE__*/React.createElement(DataTable, {\n    columns: requestColumns,\n    data: requests,\n    responsive: true,\n    defaultSortField: true,\n    pagination: true,\n    paginationRowsPerPageOptions: [2, 5, 10, 15, 20, 25, 30],\n    pointerOnHover: true,\n    expandableRows: true,\n    expandableRowDisabled: row => row.disabled,\n    expandableRowsComponent: /*#__PURE__*/React.createElement(ExpanableRequestRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 40\n      }\n    }),\n    conditionalRowStyles: conditionalRowStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }) : \"Няма текущи заявки\"), /*#__PURE__*/React.createElement(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, users.length > 0 ? /*#__PURE__*/React.createElement(DataTable, {\n    columns: userColumns,\n    data: users,\n    responsive: true,\n    defaultSortField: true,\n    pagination: true,\n    paginationRowsPerPageOptions: [2, 5, 10, 15, 20, 25, 30],\n    pointerOnHover: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }) : \"Няма регистрирани потребители\")));\n};\n\nexport default AdminPanel;","map":{"version":3,"sources":["T:/JivaRecovery-master/client/src/components/administration/admin-panel/admin-panel.jsx"],"names":["React","useState","useEffect","Tab","Tabs","TabList","TabPanel","DataTable","Request","EditUserModal","requestService","userService","AdminPanel","requests","setRequests","users","setUsers","updateUser","id","newUser","map","user","_id","requestColumns","name","selector","sortable","className","userColumns","cell","data","conditionalRowStyles","when","row","status","style","backgroundColor","cursor","ExpanableRequestRow","getRequest","then","res","getUser","length","disabled"],"mappings":"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","sourcesContent":["import \"./admin-panel.scss\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport DataTable from \"react-data-table-component\";\nimport Request from \"../request/request\";\nimport EditUserModal from \"../../modals/edit-user-modal\";\nimport requestService from \"../../../services/request-service\";\nimport userService from \"../../../services/user-service\";\n\nconst AdminPanel = () => {\n  let [requests, setRequests] = useState([]);\n  let [users, setUsers] = useState([]);\n\n  const updateUser = (id, newUser) => {\n    setUsers((users) => {\n      return users.map((user) => {\n        if (user._id === id) {\n          return newUser;\n        } else {\n          return user;\n        }\n      });\n    });\n  };\n  const requestColumns = [\n    {\n      name: \"Марка\",\n      selector: \"brand\",\n      sortable: true,\n    },\n    {\n      name: \"Модел\",\n      selector: \"model\",\n      sortable: true,\n    },\n    {\n      name: \"Година\",\n      selector: \"year\",\n      sortable: true,\n    },\n    {\n      name: \"Състояние\",\n      selector: \"condition\",\n      sortable: true,\n    },\n    {\n      name: \"Статус\",\n      selector: \"status\",\n      sortable: true,\n      className: \"status\",\n    },\n  ];\n\n  const userColumns = [\n    {\n      name: \"Име\",\n      selector: \"name\",\n      sortable: true,\n    },\n    {\n      name: \"Имейл\",\n      selector: \"email\",\n      sortable: true,\n    },\n    {\n      name: \"Телефон\",\n      selector: \"phone\",\n      sortable: true,\n    },\n    {\n      name: \"\",\n      cell: (data) => <EditUserModal user={data} updateUser={updateUser} />,\n    },\n  ];\n\n  const conditionalRowStyles = [\n    {\n      when: (row) => row.status === \"Изчакване\",\n      style: {\n        backgroundColor: \"rgba(240,219,8,0.2)\",\n        \"&:hover\": {\n          cursor: \"pointer\",\n        },\n      },\n    },\n    {\n      when: (row) => row.status === \"Одобрена\",\n      style: {\n        backgroundColor: \"rgba(8, 240, 53, 0.2)\",\n        \"&:hover\": {\n          cursor: \"pointer\",\n        },\n      },\n    },\n    {\n      when: (row) => row.status === \"Отхвърлена\",\n      style: {\n        backgroundColor: \"rgba(240, 8, 45, 0.2)\",\n        \"&:hover\": {\n          cursor: \"pointer\",\n        },\n      },\n    },\n    {\n      when: (row) => row.status === \"Завършена\",\n      style: {\n        backgroundColor: \"rgba(8, 159, 240, 0.2)\",\n        \"&:hover\": {\n          cursor: \"pointer\",\n        },\n      },\n    },\n  ];\n\n  const ExpanableRequestRow = ({ data }) => {\n    return <Request {...data} />;\n  };\n\n  useEffect(() => {\n    requestService.getRequest(\"all\").then((res) => {\n      setRequests(res);\n    });\n    userService.getUser(\"all\").then((res) => {\n      setUsers(res);\n    });\n  }, []);\n\n  return (\n    <div className=\"admin-panel\">\n      <Tabs>\n        <TabList>\n          <Tab>Заявки</Tab>\n          <Tab>Потребители</Tab>\n        </TabList>\n\n        <TabPanel>\n          {requests.length > 0 ? (\n            <DataTable\n              columns={requestColumns}\n              data={requests}\n              responsive\n              defaultSortField\n              pagination\n              paginationRowsPerPageOptions={[2, 5, 10, 15, 20, 25, 30]}\n              pointerOnHover\n              expandableRows\n              expandableRowDisabled={(row) => row.disabled}\n              expandableRowsComponent={<ExpanableRequestRow />}\n              conditionalRowStyles={conditionalRowStyles}\n            />\n          ) : (\n            \"Няма текущи заявки\"\n          )}\n        </TabPanel>\n        <TabPanel>\n          {users.length > 0 ? (\n            <DataTable\n              columns={userColumns}\n              data={users}\n              responsive\n              defaultSortField\n              pagination\n              paginationRowsPerPageOptions={[2, 5, 10, 15, 20, 25, 30]}\n              pointerOnHover\n            />\n          ) : (\n            \"Няма регистрирани потребители\"\n          )}\n        </TabPanel>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default AdminPanel;\n"]},"metadata":{},"sourceType":"module"}